import paramiko
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
IP_LIST_FILE = "ips.txt"
PRIVATE_KEY_PATH = "C:\\Users\\eleonora.chorshanbie\\Downloads\\eleonora_test_gpu_sines"  # ‚Üê –£–∫–∞–∂–∏ –ø—É—Ç—å
USERNAME = "ubuntu"           # ‚Üê –£–∫–∞–∂–∏ –ª–æ–≥–∏–Ω
SSH_PORT = 22
MAX_WORKERS = 10

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
logging.basicConfig(
    filename="ssh_availability.log",
    filemode="a",
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(logging.Formatter("[%(levelname)s] %(message)s"))
logging.getLogger().addHandler(console)

def check_ssh(ip, username, key_path):
    try:
        key = paramiko.RSAKey.from_private_key_file(key_path)

        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        ssh.connect(
            hostname=ip,
            port=SSH_PORT,
            username=username,
            pkey=key,
            timeout=10,
            banner_timeout=10,
            auth_timeout=10
        )

        ssh.close()
        logging.info(f"[{ip}] ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
    except paramiko.AuthenticationException:
        logging.warning(f"[{ip}] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    except paramiko.SSHException as e:
        logging.warning(f"[{ip}] ‚ùå SSH –æ—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logging.warning(f"[{ip}] ‚ùå –°–µ—Ç–µ–≤–∞—è/–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    with open(IP_LIST_FILE, "r") as f:
        ip_list = [line.strip() for line in f if line.strip()]

    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è {len(ip_list)} IP...")

    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = {executor.submit(check_ssh, ip, USERNAME, PRIVATE_KEY_PATH): ip for ip in ip_list}

        for future in as_completed(futures):
            ip = futures[future]
            try:
                future.result()
            except Exception as e:
                logging.error(f"[{ip}] ‚ùó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
